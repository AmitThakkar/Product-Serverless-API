{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Parameters": {
    "S3BucketName": {
      "Type": "String",
      "Description": "Bucket Name for Lambda Code"
    },
    "S3BucketKey": {
      "Type": "String",
      "Description": "Bucket Key for Lambda Code"
    },
    "TableName": {
      "Type": "String",
      "Description": "Table Name for DyanmoDB Table"
    }
  },
  "Resources" : {
    "ProductLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "product-lambda-execution-role",
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        }
      }
    },
    "ProductLambdaExecutionRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "product-lambda-execution-role-policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:*",
                "dynamodb:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ProductLambdaExecutionRole"
          }
        ]
      }
    },

    "ProductAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "ProductAPI",
        "Description": "API used for Product",
        "FailOnWarnings" : true
      }
    },

    "ProductResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ProductAPI"},
        "ParentId": {"Fn::GetAtt": ["ProductAPI", "RootResourceId"]},
        "PathPart": "products"
      }
    },
    "ListProductLambda": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": {"Ref": "S3BucketName"},
          "S3Key": {"Ref": "S3BucketKey"}
        },
        "Description" : "This Lambda Function returns List Of Collection",
        "Handler" : "src/api/product/list-product.handler",
        "Role" :  {
          "Fn::GetAtt": [
            "ProductLambdaExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables":  {
            "TableName": {"Ref": "TableName"}
          }
        },
        "Runtime" : "nodejs8.10"
      }
    },
    "ListProductsRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "ProductResource"
        },
        "RestApiId": {
          "Ref": "ProductAPI"
        },
        "OperationName": "ListProducts",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListProductLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": [
                "",
                [
                  "{",
                  "\"size\": \"$input.params('size')\"",
                  "}"
                ]
              ]
            }
          }
        }
      }
    },
    "ListProductLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ListProductLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["",
            [
              "arn:aws:execute-api:",
              {"Ref": "AWS::Region"},
              ":",
              {"Ref": "AWS::AccountId"},
              ":",
              {"Ref": "ProductAPI"},
              "/*"
            ]
          ]
        }
      }
    },

    "AddProductLambda": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": {"Ref": "S3BucketName"},
          "S3Key": {"Ref": "S3BucketKey"}
        },
        "Description" : "This Lambda Function adds Product",
        "Handler" : "src/api/product/add-product.handler",
        "Role" :  {
          "Fn::GetAtt": [
            "ProductLambdaExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables":  {
            "TableName": {"Ref": "TableName"}
          }
        },
        "Runtime" : "nodejs8.10"
      }
    },
    "AddProductsRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "ProductResource"
        },
        "RestApiId": {
          "Ref": "ProductAPI"
        },
        "OperationName": "AddProducts",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddProductLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": [
                "",
                [
                  "{",
                        "\"size\": $input.json('size'),",
                        "\"collection_name\": $input.json('collection_name'),",
                        "\"product_name\": $input.json('product_name'),",
                        "\"image\": $input.json('image'),",
                        "\"sku\": $input.json('sku')",
                  "}"
                ]
              ]
            }
          }
        }
      }
    },
    "AddProductLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["AddProductLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["",
            [
              "arn:aws:execute-api:",
              {"Ref": "AWS::Region"},
              ":",
              {"Ref": "AWS::AccountId"},
              ":",
              {"Ref": "ProductAPI"},
              "/*"
            ]
          ]
        }
      }
    },

    "UpdateProductLambda": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": {"Ref": "S3BucketName"},
          "S3Key": {"Ref": "S3BucketKey"}
        },
        "Description" : "This Lambda Function adds Product",
        "Handler" : "src/api/product/update-product.handler",
        "Role" :  {
          "Fn::GetAtt": [
            "ProductLambdaExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables":  {
            "TableName": {"Ref": "TableName"}
          }
        },
        "Runtime" : "nodejs8.10"
      }
    },
    "UpdateProductsRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "PUT",
        "ResourceId": {
          "Ref": "ProductResource"
        },
        "RestApiId": {
          "Ref": "ProductAPI"
        },
        "OperationName": "UpdateProducts",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateProductLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": [
                "",
                [
                  "{",
                        "\"id\": $input.json('id'),",
                        "\"size\": $input.json('size'),",
                        "\"collection_name\": $input.json('collection_name'),",
                        "\"product_name\": $input.json('product_name'),",
                        "\"image\": $input.json('image'),",
                        "\"sku\": $input.json('sku')",
                  "}"
                ]
              ]
            }
          }
        }
      }
    },
    "UpdateProductLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["UpdateProductLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["",
            [
              "arn:aws:execute-api:",
              {"Ref": "AWS::Region"},
              ":",
              {"Ref": "AWS::AccountId"},
              ":",
              {"Ref": "ProductAPI"},
              "/*"
            ]
          ]
        }
      }
    },

    "ProductOneResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ProductAPI"},
        "ParentId": {"Ref": "ProductResource"},
        "PathPart": "{id}"
      }
    },
    "GetProductLambda": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": {"Ref": "S3BucketName"},
          "S3Key": {"Ref": "S3BucketKey"}
        },
        "Description" : "This Lambda Function gets a Product",
        "Handler" : "src/api/product/get-product.handler",
        "Role" :  {
          "Fn::GetAtt": [
            "ProductLambdaExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables":  {
            "TableName": {"Ref": "TableName"}
          }
        },
        "Runtime" : "nodejs8.10"
      }
    },
    "GetProductsRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "ProductOneResource"
        },
        "RestApiId": {
          "Ref": "ProductAPI"
        },
        "OperationName": "GetOneProduct",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetProductLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Join": [
                "",
                [
                  "{",
                  "\"id\": \"$input.params('id')\"",
                  "}"
                ]
              ]
            }
          }
        }
      }
    },
    "GetProductLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetProductLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["",
            [
              "arn:aws:execute-api:",
              {"Ref": "AWS::Region"},
              ":",
              {"Ref": "AWS::AccountId"},
              ":",
              {"Ref": "ProductAPI"},
              "/*"
            ]
          ]
        }
      }
    },

    "CollectionResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ProductAPI"},
        "ParentId": {"Fn::GetAtt": ["ProductAPI", "RootResourceId"]},
        "PathPart": "collections"
      }
    },
    "ListCollectionLambda": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": {"Ref": "S3BucketName"},
          "S3Key": {"Ref": "S3BucketKey"}
        },
        "Description" : "This Lambda Function returns List Of Collection",
        "Handler" : "src/api/collection/list-collection.handler",
        "Role" :  {
          "Fn::GetAtt": [
            "ProductLambdaExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables":  {
            "TableName": {"Ref": "TableName"}
          }
        },
        "Runtime" : "nodejs8.10"
      }
    },
    "ListCollectionsRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {"Ref": "CollectionResource"},
        "RestApiId": {"Ref": "ProductAPI"},
        "OperationName": "ListCollections",
        "MethodResponses": [{
          "StatusCode": 200
        }],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["ListCollectionLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }]
        }
      }
    },
    "ListCollectionLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ListCollectionLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["",
            [
              "arn:aws:execute-api:",
              {"Ref": "AWS::Region"},
              ":",
              {"Ref": "AWS::AccountId"},
              ":",
              {"Ref": "ProductAPI"},
              "/*"
            ]
          ]
        }
      }
    },

    "ProductCollectionResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ProductAPI"},
        "ParentId": {"Ref": "CollectionResource"},
        "PathPart": "products"
      }
    },
    "ListProductByCollectionLambda": {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket": {"Ref": "S3BucketName"},
          "S3Key": {"Ref": "S3BucketKey"}
        },
        "Description" : "This Lambda Function returns List Of Product By Collection",
        "Handler" : "src/api/collection/list-product-by-collection-name.handler",
        "Role" :  {
          "Fn::GetAtt": [
            "ProductLambdaExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables":  {
            "TableName": {"Ref": "TableName"}
          }
        },
        "Runtime" : "nodejs8.10"
      }
    },
    "ListProductByCollectionsRequest": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {"Ref": "ProductCollectionResource"},
        "RestApiId": {"Ref": "ProductAPI"},
        "OperationName": "ListProductByCollection",
        "MethodResponses": [{
          "StatusCode": 200
        }],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["ListProductByCollectionLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "{",
              "\"collection_name\": \"$input.params('collection_name')\"",
              "}"
            ]]}
          }
        }
      }
    },
    "ListProductByCollectionLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ListProductByCollectionLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["",
            [
              "arn:aws:execute-api:",
              {"Ref": "AWS::Region"},
              ":",
              {"Ref": "AWS::AccountId"},
              ":",
              {"Ref": "ProductAPI"},
              "/*"
            ]
          ]
        }
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "ApiGatewayAccount": {
      "Type" : "AWS::ApiGateway::Account",
      "Properties" : {
        "CloudWatchRoleArn" : {"Fn::GetAtt" : ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["ListCollectionsRequest"],
      "Properties": {
        "RestApiId": {"Ref": "ProductAPI"},
        "StageName": "DevStage"
      }
    }
  }
}